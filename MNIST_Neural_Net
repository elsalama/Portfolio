import tensorflow as tf
import os
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Dropout
from tensorflow.keras.optimizers import Adam

# Load MNIST dataset
(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

# Normalize the images to [0, 1] range
train_images = train_images / 255.0
test_images = test_images / 255.0

# Hyperparameters
learning_rate = 0.003
batch_size = 16
epochs = 40
dropout_rate = 0.8
hidden_layer_size = 189

# Build the model
model = Sequential([
    Flatten(input_shape=(28, 28)),
    Dense(hidden_layer_size, activation='relu'),
    Dropout(dropout_rate),
    Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer=Adam(learning_rate=learning_rate),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

import time
start_time = time.perf_counter()

# Train the model
model.fit(train_images, train_labels, epochs=epochs, batch_size=batch_size, validation_split=0.1)

end_time = time.perf_counter()
time_lapse = end_time - start_time
print(f"Training Time: {time_lapse} seconds")

# Evaluate the model
test_loss, test_acc = model.evaluate(test_images, test_labels)
print('\nTest Accuracy:', test_acc)

import csv
# Define your experiment's configuration and results
experiment_config = {
    "Learning Rate": learning_rate,
    "Batch Size": batch_size,
    "Epochs": epochs,
    "Dropout Rate": dropout_rate,
    "Hidden Layer Size": hidden_layer_size,
    "Test Accuracy": test_acc,
    "Training Time": time_lapse
}

# Specify the CSV file you want to append data to
log_file_path = 'experiment_log.csv'

# Check if the file exists to write headers
file_exists = os.path.isfile(log_file_path)

# Open the file and append the experiment data
with open(log_file_path, 'a', newline='') as csvfile:
    fieldnames = list(experiment_config.keys())
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

    if not file_exists:
        writer.writeheader()  # Write header only once
    
    writer.writerow(experiment_config)

print(f"Attempting to save log to: {log_file_path}")
if os.path.isfile(log_file_path):
    print("Log file created successfully.")
else:
    print("Log file not found. Please check directory and permissions.")


