import math
import re

class Bayes_Classifier:

    def __init__(self):
        self.positive_word_counts = {}
        self.negative_word_counts = {}
        self.total_positive_reviews = 0
        self.total_negative_reviews = 0
        self.total_positive_words = 0
        self.total_negative_words = 0
        self.vocab = set()

    def train(self, lines):
        for line in lines:
            line = line.strip()
            sentiment, _, text = line.partition('|')
            words = re.findall(r'\b\w+\b', text.lower())
            if sentiment == '5':
                self.total_positive_reviews += 1
                for word in words:
                    self.positive_word_counts[word] = self.positive_word_counts.get(word, 0) + 1
                    self.total_positive_words += 1
            elif sentiment == '1':
                self.total_negative_reviews += 1
                for word in words:
                    self.negative_word_counts[word] = self.negative_word_counts.get(word, 0) + 1
                    self.total_negative_words += 1
            self.vocab.update(words)

    def classify(self, lines):
        predictions = []
        for line in lines:
            line = line.strip()
            _, _, text = line.partition('|')
            words = re.findall(r'\b\w+\b', text.lower())
            pos_log_prob = math.log(self.total_positive_reviews / (self.total_positive_reviews + self.total_negative_reviews))
            neg_log_prob = math.log(self.total_negative_reviews / (self.total_positive_reviews + self.total_negative_reviews))
            for word in words:
                if word in self.vocab:
                    pos_log_prob += math.log((self.positive_word_counts.get(word, 0) + 1) / (self.total_positive_words + len(self.vocab)))
                    neg_log_prob += math.log((self.negative_word_counts.get(word, 0) + 1) / (self.total_negative_words + len(self.vocab)))
            predictions.append('5' if pos_log_prob > neg_log_prob else '1')
        return predictions
